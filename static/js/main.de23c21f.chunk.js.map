{"version":3,"sources":["task/const.js","task/components.js","column/utils.js","column/components.js","task/actionCreators.js","column/actionCreators.js","column/const.js","board/components.js","task/actions.js","reducer.js","defaultState.js","App.js","serviceWorker.js","index.js"],"names":["DragTypes","Task","connectDragSource","this","props","react_default","a","createElement","Card_default","style","opacity","CardContent_default","Typography_default","color","text","Component","DragSource","beginDrag","endDrag","connect","monitor","dragSource","isDragging","getPositionIndex","component","initialClientOffset","getInitialSourceClientOffset","delta","getDifferenceFromInitialOffset","columnElementPosition","ReactDOM","findDOMNode","getBoundingClientRect","offsetY","y","gridSpacing","positionIndex","Math","ceil","abs","itemTarget","drop","task","getItem","moveTask","id","columnId","moveHoverCard","hover","hoverCard","CardsContainer","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","_this2","_this$props","tasks","renderedTasks","map","index","Grid_default","item","key","components","label","column","title","temporaryElement","splice","connectDropTarget","container","alignItems","direction","spacing","renderCards","compose","state","dispatch","taskId","type","DropTarget","dropTarget","Column","_this3","input","React","createRef","event","setState","target","value","length","addTask","objectSpread","TextField_default","onChange","onInputChange","bind","onKeyPress","handleInputKeyPress","margin","ref","Button_default","onClick","variant","size","components_CardsContainer","Board","current","columns","concat","toConsumableArray","addColumn","justify","column_components","newColumns","forEach","columnIndex","newTasks","taskIndex","findIndex","newTask","random","toString","substring","reducer","arguments","undefined","action","defaultState","store","createStore","App","es","className","board_components","DragDropContext","HTML5Backend","Boolean","window","location","hostname","match","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.de23c21f.chunk.js","sourcesContent":["export const DragTypes = {ITEM: 'task'};\n\nexport const ADD_TASK = 'ADD_TASK';\nexport const MOVE_TASK = 'MOVE_TASK';\nexport const MOVE_HOVER_CARD = 'MOVE_HOVER_CARD';\n","import React, { Component } from 'react';\n\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\n\nimport { DragSource } from 'react-dnd';\n\nimport { DragTypes } from './const';\n\n\nconst itemSource = {\n  beginDrag(props){\n    return props;\n  },\n  endDrag(props){\n    return props;\n  }\n}\n\nfunction collect(connect, monitor) {\n  return {\n    connectDragSource: connect.dragSource(),\n    isDragging: monitor.isDragging()\n  };\n}\n\n\nclass Task extends Component {\n\n  render() {\n    const { connectDragSource } = this.props\n\n    return connectDragSource(\n      <div>\n        <Card style={{opacity: this.props.opacity || 1}}>\n          <CardContent>\n            <Typography color=\"textPrimary\" >\n              { this.props.text }\n            </Typography>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n}\n\nexport default DragSource(DragTypes.ITEM, itemSource, collect)(Task);\n","import ReactDOM from 'react-dom'\n\nexport const collect = (connect, monitor) => {\n  return {\n    connectDropTarget: connect.dropTarget()\n  }\n}\n\nconst getPositionIndex = (monitor, component) => {\n  const initialClientOffset = monitor.getInitialSourceClientOffset();\n  const delta = monitor.getDifferenceFromInitialOffset();\n\n  const columnElement = ReactDOM.findDOMNode(component);\n  const columnElementPosition = columnElement.getBoundingClientRect()\n\n  const cardHeight = 78; // TODO\n  const offsetY = initialClientOffset.y - component.gridSpacing/2 - columnElementPosition.y + delta.y;\n  const positionIndex = Math.ceil(offsetY / cardHeight);\n\n  return Math.abs(positionIndex);\n}\n\nexport const itemTarget = {\n\n  drop(props, monitor, component){\n    const task = monitor.getItem();\n    const positionIndex = getPositionIndex(monitor, component);\n\n    component.props.moveTask(\n      task.id,\n      props.columnId,\n      positionIndex\n    );\n    component.props.moveHoverCard(null, null); // todo: add action creator for removing hover card\n  },\n\n  hover(props, monitor, component){\n    const positionIndex = getPositionIndex(monitor, component);\n    const hoverCard = component.props.hoverCard;\n\n    if ((component.props.columnId !== hoverCard.columnId) || (positionIndex !== hoverCard.positionIndex)){\n      component.props.moveHoverCard(\n        component.props.columnId,\n        positionIndex\n      );\n    }\n  }\n}\n","import React, { Component } from 'react';\n\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\n\nimport Task from '../task/components';\n\nimport { DropTarget } from 'react-dnd';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux'\nimport { DragTypes } from '../task/const';\n\nimport { moveHoverCard } from './actionCreators';\nimport { moveTask, addTask } from '../task/actionCreators';\n\nimport { collect, itemTarget } from './utils';\n\n\nclass CardsContainer extends Component {\n\n  constructor(props){\n    super(props);\n    this.gridSpacing = 16;\n  }\n\n  renderCards() {\n    const {\n      tasks,\n      hoverCard\n    } = this.props;\n\n    const renderedTasks = tasks.map((task, index) => (\n      <Grid item key={task.id}>\n        <Task\n          id={task.id}\n          text={task.label}\n          column={this.props.title}\n        />\n      </Grid>\n    ));\n\n    if ((hoverCard.columnId === this.props.columnId) && (hoverCard.positionIndex !== null)) {\n      const temporaryElement = (\n        <Grid item key={0}>\n          <Task\n            text=\"&nbsp;\"\n            opacity={0.3}\n          />\n        </Grid>\n      );\n      renderedTasks.splice(hoverCard.positionIndex, 0, temporaryElement);\n    }\n    return renderedTasks;\n  }\n\n  render() {\n    return this.props.connectDropTarget(\n      <div>\n        <Grid\n          container\n          alignItems=\"stretch\"\n          direction=\"column\"\n          spacing={this.gridSpacing}\n        >\n          {this.renderCards()}\n        </Grid>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    hoverCard: state.hoverCard\n  }\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    moveTask: (taskId, columnId, positionIndex) => dispatch(moveTask(taskId, columnId, positionIndex)),\n    moveHoverCard: (columnId, positionIndex) => dispatch(moveHoverCard(columnId, positionIndex))\n  };\n};\n\nCardsContainer = compose(\n  connect(mapStateToProps, mapDispatchToProps),\n  DropTarget(DragTypes.ITEM, itemTarget, collect)\n)(CardsContainer);\n\n\nclass Column extends Component {\n\n  constructor(props){\n    super(props);\n    this.input = React.createRef();\n    this.state = {task: ''}\n  }\n\n  onInputChange(event) {\n    this.setState({task: event.target.value});\n  }\n\n  addTask(){\n    if (this.state.task.length > 0){\n      this.props.addTask(this.props.id, this.state.task);\n      this.setState({...this.state, task: ''});\n    }\n  }\n\n  handleInputKeyPress(event){\n    if (event.key === 'Enter'){\n      this.addTask();\n    }\n  }\n\n  render(){\n    return (\n      <div>\n        <h5>{this.props.title}</h5>\n\n        <Grid container spacing={8} direction=\"row\" alignItems=\"flex-end\">\n          <Grid item>\n            <TextField\n              label=\"Enter task description\"\n              value={this.state.task}\n              onChange={this.onInputChange.bind(this)}\n              onKeyPress={this.handleInputKeyPress.bind(this)}\n              margin=\"none\"\n              ref={this.input}\n            />\n          </Grid>\n          <Grid item>\n            <Button\n              color=\"primary\"\n              onClick={this.addTask.bind(this)}\n              variant=\"outlined\"\n              size=\"small\"\n            >\n              Create Task\n            </Button>\n          </Grid>\n        </Grid>\n        <br/>\n        <CardsContainer\n          tasks={this.props.tasks}\n          columnId={this.props.id}\n        />\n      </div>\n    );\n  }\n}\n\nconst mapColumnStateToProps = () => ({});\nconst mapColumnDispatchToProps = (dispatch) => {\n  return {\n    addTask: (columnId, task) => dispatch(addTask(columnId, task))\n  }\n}\n\nexport default connect(mapColumnStateToProps, mapColumnDispatchToProps)(Column);\n","import { ADD_TASK, MOVE_TASK } from './const';\n\n\nexport const addTask = (columnId, task) => {\n    return {\n        type: ADD_TASK,\n        columnId,\n        task\n    };\n}\n\nexport const moveTask = (taskId, columnId, positionIndex) => {\n    return {\n        type: MOVE_TASK,\n        taskId,\n        columnId,\n        positionIndex\n    };\n}\n","import { MOVE_HOVER_CARD } from './const';\n\nexport const moveHoverCard = (columnId, positionIndex) => {\n    return {\n        type: MOVE_HOVER_CARD,\n        columnId,\n        positionIndex,\n    };\n}\n","export const MOVE_HOVER_CARD = 'MOVE_HOVER_CARD';\n","import React, { Component } from 'react';\n\nimport { connect } from 'react-redux';\n\nimport Grid from '@material-ui/core/Grid';\n\nimport Column from '../column/components';\n\n\nclass Board extends Component {\n\n  constructor(props){\n    super(props);\n    this.input = React.createRef();\n  }\n\n  addColumn(){\n    if (this.input.current.value.length > 0){\n      this.setState({\n        ...this.state,\n        columns: [...this.state.columns, this.input.current.value]\n      });\n      this.input.current.value = '';\n    }\n  }\n\n  handleInputKeyPress(event){\n    if (event.key === 'Enter'){\n      this.addColumn();\n    }\n  }\n\n  render(){\n    return (\n      <Grid container direction=\"column\">\n        <Grid item>\n          <h4>Drag-and-drop board</h4>\n        </Grid>\n        <Grid\n          item\n          container\n          direction=\"row\"\n          justify=\"flex-start\"\n          alignItems=\"flex-start\"\n          spacing={16}\n        >\n            {this.props.columns.map((column, index) =>\n              <Grid item key={column.id}>\n                <Column\n                  id={column.id}\n                  title={column.label}\n                  tasks={column.tasks}\n                />\n              </Grid>\n            )}\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    columns: state.columns\n  }\n}\nconst mapDispatchToProps = () => ({});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Board);\n","export const moveTask = (columns, taskId, columnId, positionIndex) => {\n  let newColumns = [...columns];\n  let task = null;\n\n  newColumns.forEach((column, columnIndex) => {\n    let newTasks = [...column.tasks];\n    const taskIndex = newTasks.findIndex(item => item.id === taskId);\n    if (taskIndex !== -1) {\n      task = newTasks.splice(taskIndex, 1);\n    }\n    newColumns[columnIndex].tasks = newTasks;\n  });\n\n  newColumns.forEach((column, columnIndex) => {\n    if (column.id === columnId){\n      column.tasks.splice(positionIndex, 0, task[0]);\n    }\n  });\n\n  return newColumns;\n}\n\nexport const addTask = (columns, columnId, task) => {\n  let newColumns = [...columns];\n  newColumns.forEach(column => {\n    if (column.id === columnId){\n      const newTask = {\n        id: Math.random().toString(36).substring(2),  // random string\n        label: task\n      };\n      column.tasks = [...column.tasks, newTask];\n    }\n  });\n  return newColumns;\n}\n","import { MOVE_TASK, ADD_TASK } from './task/const';\nimport { MOVE_HOVER_CARD } from './column/const';\n\nimport { moveTask, addTask } from './task/actions';\n\n\nconst reducer = (state=null, action) => {\n  switch (action.type) {\n    case MOVE_TASK:\n      return {\n        ...state,\n        columns: moveTask(\n          state.columns,\n          action.taskId,\n          action.columnId,\n          action.positionIndex\n        )\n      };\n    case ADD_TASK:\n      return {\n        ...state,\n        columns: addTask(\n          state.columns,\n          action.columnId,\n          action.task\n        )\n      }\n    case MOVE_HOVER_CARD:\n      return {\n        ...state,\n        hoverCard: {\n          columnId: action.columnId,\n          positionIndex: action.positionIndex\n        }\n      }\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","const defaultState = {\n  hoverCard: {\n    columnId: null,\n    positionIndex: null,\n    task: null\n  },\n  columns: [\n    {\n      id: 1,\n      label: 'Business Requirements',\n      tasks: [\n        {id: 1, label: 'task #1'},\n        {id: 2, label: 'task #2'},\n        {id: 3, label: 'task #3'}\n      ]\n    },\n    {\n      id: 2,\n      label: 'Estimation',\n      tasks: [\n        {id: 4, label: 'task #4'},\n        {id: 5, label: 'task #5'},\n        {id: 6, label: 'task #6'},\n        {id: 7, label: 'task #7'}\n      ]\n    },\n    {\n      id: 3,\n      label: 'Development',\n      tasks: [\n        {id: 8, label: 'task #8'},\n        {id: 9, label: 'task #9'}\n      ]\n    },\n    {\n      id: 4,\n      label: 'Tests',\n      tasks: [\n        {id: 10, label: 'task #10'},\n        {id: 11, label: 'task #11'},\n        {id: 12, label: 'task #12'},\n        {id: 13, label: 'task #13'}\n      ]\n    }\n  ]\n}\n\nexport default defaultState;\n","import React, { Component } from 'react';\n\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\n\nimport HTML5Backend from 'react-dnd-html5-backend';\nimport { DragDropContext } from 'react-dnd';\n\nimport Board from './board/components';\n\nimport reducer from './reducer';\nimport defaultState from './defaultState';\n\n\nconst store = createStore(reducer, defaultState)\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <div className=\"App\">\n          <Board />\n        </div>\n      </Provider>\n    );\n  }\n}\n\nexport default DragDropContext(HTML5Backend)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}